name: Build and Deploy to Azure

on:
  workflow_dispatch:
    inputs:
      location:
        description: "Region"
        required: true
        default: "eastus"
        type: choice
        options:
          - eastus
          - eastus2
          - westus
          - westus2

env:
  RESOURCEGROUPNAME: java-postgres
  LOCATION: ${{ inputs.location }}
  REGISTRYSKU: "Standard"
  REGISTRYNAME: "javapostgres13579"
  CLUSTERNAME: java-postgres

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resources
        continue-on-error: false
        run: |
          if [ $(az group exists --name ${{ env.RESOURCEGROUPNAME }}) = false ]; then
            az group create -g ${{ env.RESOURCEGROUPNAME }} -l ${{ env.LOCATION }}
          fi
          az acr create -n ${{ env.REGISTRYNAME }} -g ${{ env.RESOURCEGROUPNAME }} --sku ${{ env.REGISTRYSKU }} --admin-enabled true
          az acr login -n ${{ env.REGISTRYNAME }}

      - uses: actions/setup-java@v3
        with:
          distribution: "oracle"
          java-version: "17"

      - name: Build and Push Docker Image
        continue-on-error: false
        run: |
          pushd app
          mvn package
          az acr build --image java-postgres:latest --registry ${{ env.REGISTRYNAME }} --file Dockerfile .
          popd

      - name: Package and Push Helm Chart
        continue-on-error: true
        run: |
          pushd charts/java-postgres
          helm package .
          helm push java-postgres-0.1.0.tgz oci://${{ env.REGISTRYNAME }}.azurecr.io/helm
          popd

      - uses: actions/upload-artifact@v3
        with:
          name: operator-template
          path: deploy/zalando-postgres-operator.template.yml
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: actions/download-artifact@v3
        with:
          name: operator-template

      - name: Create Resources
        continue-on-error: false
        run: |
          echo 'Creating AKS cluster'
          az aks create -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.CLUSTERNAME }} --attach-acr ${{ env.REGISTRYNAME }} --enable-managed-identity --node-count 1 --enable-addons http_application_routing,monitoring --enable-cluster-autoscaler --min-count 1 --max-count 3 --generate-ssh-keys
          
          echo 'Waiting for AKS cluster to be ready'
          sleep 60

          echo 'Adding repo for postgres-operator'
          helm repo add postgres-operator-charts https://opensource.zalando.com/postgres-operator/charts/postgres-operator
          echo 'Installing the postgres-operator'
          helm install postgres-operator postgres-operator-charts/postgres-operator
          
          echo 'Getting the DNS Zone Name'
          HTTPApplicationRoutingZoneName=$(az aks show -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.CLUSTERNAME }} --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)
          echo "HTTPApplicationRoutingZoneName: $HTTPApplicationRoutingZoneName"

          echo 'Creating values file from template'
          sed -e "s/[HTTPApplicationRoutingZoneName]/$HTTPApplicationRoutingZoneName/g" zalando-postgres-operator.template.yml > zalando-postgres-operator-values.yml

          echo 'Adding repo for postgres-operator-ui'
          helm repo add postgres-operator-ui-charts https://opensource.zalando.com/postgres-operator/charts/postgres-operator-ui
          echo 'Installing the postgres-operator-ui'
          helm install -f zalando-postgres-operator-values.yml postgres-operator-ui postgres-operator-ui-charts/postgres-operator-ui

          echo 'Creating db cluster - PENDING'
          echo 'Deploying demo app to AKS - PENDING'

#   cleanup:
#     name: Cleanup
#     needs: deploy
#     runs-on: ubuntu-latest
#     steps:
#       - name: Azure authentication
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}

#       - name: Delete Resource Group
#         continue-on-error: true
#         run: |
#           az group delete -g ${{ env.RESOURCEGROUPNAME }} --yes
